import tkinter as tk
from tkinter import ttk, scrolledtext
import threading

from googletrans import Translator
from google.cloud import texttospeech
import speech_recognition as sr
import pygame
import os

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "handy-digit-466119-k8-8880816ec3d4.json"

# Initialize components
translator = Translator()
pygame.init()
pygame.mixer.init()

# --- TTS Functions ---
def speak_text(text, lang="en"):
    client = texttospeech.TextToSpeechClient()
    input_text = texttospeech.SynthesisInput(text=text)

    if lang == "fa":
        voice = texttospeech.VoiceSelectionParams(
            language_code="fa-IR",
            name="ar-XA-Standard-D",
            ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
        )
        filename = "output_fa.mp3"
    else:
        voice = texttospeech.VoiceSelectionParams(
            language_code="en-US",
            name="en-US-Wavenet-F",
            ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
        )
        filename = "output_en.mp3"

    audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)
    response = client.synthesize_speech(input=input_text, voice=voice, audio_config=audio_config)

    with open(filename, "wb") as out:
        out.write(response.audio_content)
    play_audio(filename)

def play_audio(filename):
    pygame.mixer.music.load(filename)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

    # Unload the file after playing to release lock
    pygame.mixer.music.stop()
    pygame.mixer.music.unload()

# --- Speech to Text ---
def recognize_speech(lang_code="en-US"):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        status_label.config(text="Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        text = recognizer.recognize_google(audio, language=lang_code)
        return text
    except:
        return "[Could not recognize speech]"
    
# --- GUI Logic ---
def translate_text():
    direction = lang_var.get()
    input_text = input_box.get("1.0", tk.END).strip()
    if direction == "English -> Dari":
        trans = translator.translate(input_text, src="en", dest="fa")
        output_box.delete("1.0", tk.END)
        output_box.insert(tk.END, trans.text)
        speak_text(trans.text, lang="fa")
    else:
        trans = translator.translate(input_text, src="fa", dest="en")
        output_box.delete("1.0", tk.END)
        output_box.insert(tk.END, trans.text)
        speak_text(trans.text, lang="en")

def start_translation():
    threading.Thread(target=translate_text).start()

def input_speech():
    direction = lang_var.get()
    lang_code = "en-US" if direction == "English -> Dari" else "fa-IR"
    speech = recognize_speech(lang_code)
    input_box.delete("1.0", tk.END)
    input_box.insert(tk.END, speech)
    status_label.config(text="Recognized")

# --- GUI Setup ---
root = tk.Tk()
root.title("English <-> Dari Voice Translator")

lang_var = tk.StringVar(value="English -> Dari")

ttk.Label(root, text="Translation Direction:").pack(pady=5)
lang_menu = ttk.Combobox(root, textvariable=lang_var, values=["English -> Dari", "Dari -> English"], state="readonly")
lang_menu.pack()

ttk.Label(root, text="Input:").pack()
input_box = scrolledtext.ScrolledText(root, height=5, width=60)
input_box.pack()

ttk.Button(root, text="Record Speech", command=lambda: threading.Thread(target=input_speech).start()).pack(pady=5)
ttk.Button(root, text="Translate & Speak", command=start_translation).pack(pady=5)

ttk.Label(root, text="Output:").pack()
output_box = scrolledtext.ScrolledText(root, height=5, width=60)
output_box.pack()

status_label = ttk.Label(root, text="", foreground="green")
status_label.pack(pady=5)

root.mainloop()