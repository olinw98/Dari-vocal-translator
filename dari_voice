import tkinter as tk
from tkinter import ttk, scrolledtext
import threading

from googletrans import Translator
from google.cloud import texttospeech
import speech_recognition as sr
import pygame
import os

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "handy-digit-466119-k8-8880816ec3d4.json"

# Initialize components
translator = Translator()
pygame.init()
pygame.mixer.init()

# --- TTS Functions ---
def speak_text(text, lang="en"):
    client = texttospeech.TextToSpeechClient()
    input_text = texttospeech.SynthesisInput(text=text)

    if lang == "fa":
        voice = texttospeech.VoiceSelectionParams(
            language_code="fa-IR",
            name="ar-XA-Standard-D",
            ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
        )
        filename = "output_fa.mp3"
    else:
        voice = texttospeech.VoiceSelectionParams(
            language_code="en-US",
            name="en-US-Wavenet-F",
            ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
        )
        filename = "output_en.mp3"

    audio_config = texttospeech.AudioConfig(audio_encoding=texttospeech.AudioEncoding.MP3)
    response = client.synthesize_speech(input=input_text, voice=voice, audio_config=audio_config)

    with open(filename, "wb") as out:
        out.write(response.audio_content)
    play_audio(filename)

def play_audio(filename):
    pygame.mixer.music.load(filename)
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        pygame.time.Clock().tick(10)

    # Unload the file after playing to release lock
    pygame.mixer.music.stop()
    pygame.mixer.music.unload()

# --- Speech to Text ---
def recognize_speech(lang_code="en-US"):
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        status_label.config(text="Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        text = recognizer.recognize_google(audio, language=lang_code)
        return text
    except:
        return "[Could not recognize speech]"
    
# --- GUI Logic ---
def translate_text():
    direction = lang_var.get()
    input_text = input_box.get("1.0", tk.END).strip()
    if direction == "English -> Dari":
        trans = translator.translate(input_text, src="en", dest="fa")
        output_box.delete("1.0", tk.END)
        output_box.insert(tk.END, trans.text)
        speak_text(trans.text, lang="fa")
    else:
        trans = translator.translate(input_text, src="fa", dest="en")
        output_box.delete("1.0", tk.END)
        output_box.insert(tk.END, trans.text)
        speak_text(trans.text, lang="en")

def start_translation():
    threading.Thread(target=translate_text).start()

def input_speech():
    direction = lang_var.get()
    lang_code = "en-US" if direction == "English -> Dari" else "fa-IR"
    speech = recognize_speech(lang_code)
    input_box.delete("1.0", tk.END)
    input_box.insert(tk.END, speech)
    status_label.config(text="Recognized")

# --- GUI Setup ---
root = tk.Tk()
root.title("English <-> Dari Voice Translator")

lang_var = tk.StringVar(value="English -> Dari")

ttk.Label(root, text="Translation Direction:").pack(pady=5)
lang_menu = ttk.Combobox(root, textvariable=lang_var, values=["English -> Dari", "Dari -> English"], state="readonly")
lang_menu.pack()

ttk.Label(root, text="Input:").pack()
input_box = scrolledtext.ScrolledText(root, height=5, width=60)
input_box.pack()

ttk.Button(root, text="Record Speech", command=lambda: threading.Thread(target=input_speech).start()).pack(pady=5)
ttk.Button(root, text="Translate & Speak", command=start_translation).pack(pady=5)

ttk.Label(root, text="Output:").pack()
output_box = scrolledtext.ScrolledText(root, height=5, width=60)
output_box.pack()

status_label = ttk.Label(root, text="", foreground="green")
status_label.pack(pady=5)

root.mainloop()


"""Old Code"""

# def get_english_speech():
#     recognizer = sr.Recognizer()
#     mic = sr.Microphone()

#     with mic as source:
#         print("Please say something in English...")
#         recognizer.adjust_for_ambient_noise(source)
#         audio = recognizer.listen(source)

#     try:
#         text = recognizer.recognize_google(audio, language="en-US")
#         print(f"You said: {text}")
#         return text
#     except sr.UnknownValueError:
#         print("Sorry, I couldn't understand the audio.")
#         return None
#     except sr.RequestError as e:
#         print(f"Could not request results from Google Speech Recognition service; {e}")
#         return None
    
# def get_dari_speech():
#     recognizer = sr.Recognizer()
#     mic = sr.Microphone()

#     with mic as source:
#         print("لطفاً به دری صحبت کنید... (Speak in Dari)")
#         recognizer.adjust_for_ambient_noise(source)
#         audio = recognizer.listen(source)

#     try:
#         text = recognizer.recognize_google(audio, language="fa-IR")
#         print(f"Transcribed Dari: {text}")
#         return text
#     except sr.UnknownValueError:
#         print("Could not understand the Dari speech.")
#         return None
#     except sr.RequestError as e:
#         print(f"Could not contact Google STT service: {e}")
#         return None

# def speak_dari_text(dari_text):
#     client = texttospeech.TextToSpeechClient()

#     input_text = texttospeech.SynthesisInput(text=dari_text)

#     voice = texttospeech.VoiceSelectionParams(
#         language_code="fa-IR",
#         name="ar-XA-Standard-D",
#         ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
#     )

#     audio_config = texttospeech.AudioConfig(
#         audio_encoding=texttospeech.AudioEncoding.MP3,
#         speaking_rate=1.0
#     )

#     response = client.synthesize_speech(
#         input=input_text,
#         voice=voice,
#         audio_config=audio_config
#     )

#     filename = "dari_google_output.mp3"
#     with open(filename, "wb") as out:
#         out.write(response.audio_content)

# def speak_english_text(english_text):
#     client = texttospeech.TextToSpeechClient()

#     input_text = texttospeech.SynthesisInput(text=english_text)

#     voice = texttospeech.VoiceSelectionParams(
#         language_code="en-US",
#         name="en-US-Wavenet-F",
#         ssml_gender=texttospeech.SsmlVoiceGender.FEMALE,
#     )

#     audio_config = texttospeech.AudioConfig(
#         audio_encoding=texttospeech.AudioEncoding.MP3,
#         speaking_rate=1.0
#     )

#     response = client.synthesize_speech(
#         input=input_text,
#         voice=voice,
#         audio_config=audio_config
#     )

#     filename = "english_google_output.mp3"
#     with open(filename, "wb") as out:
#         out.write(response.audio_content)
#     play_audio(filename)

# def play_audio(filename):
#     pygame.init()
#     pygame.mixer.init()
#     pygame.mixer.music.load(filename)
#     pygame.mixer.music.play()

#     # Wait until audio finishes playing
#     while pygame.mixer.music.get_busy():
#         pygame.time.Clock().tick(10)

#     # Fully release the audio file
#     pygame.mixer.music.stop()
#     pygame.mixer.music.unload()

# # # --- Step 3: Simple Phonetic Mapping ---
# # def rough_phonetic_transliteration(dari_text):
# #     phonetic_map = {
# #         'ا': 'a', 'ب': 'b', 'پ': 'p', 'ت': 't', 'ث': 's', 'ج': 'j', 'چ': 'ch',
# #         'ح': 'h', 'خ': 'kh', 'د': 'd', 'ذ': 'z', 'ر': 'r', 'ز': 'z', 'ژ': 'zh',
# #         'س': 's', 'ش': 'sh', 'ص': 's', 'ض': 'z', 'ط': 't', 'ظ': 'z', 'ع': 'a',
# #         'غ': 'gh', 'ف': 'f', 'ق': 'q', 'ک': 'k', 'گ': 'g', 'ل': 'l', 'م': 'm',
# #         'ن': 'n', 'و': 'o', 'ه': 'h', 'ی': 'y', 'ء': '', ' ': ' '
# #     }
# #     phonetic = ''.join(phonetic_map.get(char, char) for char in dari_text)
# #     print("Rough phonetics:", phonetic)
# #     return phonetic

# # --- Step 1–4 Combined ---
# def english_to_dari_audio():
#     # Step 1: Get English input
#     choice = input("Type 's' for speech input, or anything else to type text: ").strip().lower()
#     if choice == 's':
#         english_text = get_english_speech()
#         if not english_text:
#             print("Falling back to manual input.")
#             english_text = input("Enter English text: ")
#     else:
#         english_text = input("Enter English text: ")

#     # Step 2: Translate to Dari (via 'fa')
#     translator = Translator()
#     translation = translator.translate(english_text, src='en', dest='fa')
#     dari_text = translation.text
#     print("Dari translation:", dari_text)

#     # # Step 3: Convert to rough phonetics
#     # phonetic = rough_phonetic_transliteration(dari_text)

#     # Step 4: Speak it using Arabic voice (gTTS)
#     print("Speaking using Google Cloud TTS...")
#     speak_dari_text(dari_text)
#     play_audio("dari_google_output.mp3")

# if __name__ == "__main__":
#     while True:
#         print("\nTranslation Menu")
#         print("1. English → Dari")
#         print("2. Dari → English")
#         choice = input("Choose option [1/2] or 'q' to quit: ").strip().lower()

#         if choice == '1':
#             english_to_dari_audio()

#         elif choice == '2':
#             dari_text = get_dari_speech()
#             if dari_text:
#                 translator = Translator()
#                 translation = translator.translate(dari_text, src='fa', dest='en')
#                 english_text = translation.text
#                 print("English translation:", english_text)
#                 print("Speaking...")
#                 speak_english_text(english_text)

#         elif choice == 'q':
#             print("Exiting. Goodbye!")
#             break

#         else:
#             print("Invalid choice. Please enter 1, 2, or q.")